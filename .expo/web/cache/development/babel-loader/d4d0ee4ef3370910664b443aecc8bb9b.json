{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nvar _jsxFileName = \"E:\\\\3TI\\\\Integration\\\\projet-Integration\\\\App\\\\Messenger\\\\Chat.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDRItqqCOKaYRO3hMHpIc_m1V61oOQcfSY\",\n  authDomain: \"help-recover-3984c.firebaseapp.com\",\n  databaseURL: \"https://help-recover-3984c.firebaseio.com\",\n  projectId: \"help-recover-3984c\",\n  storageBucket: \"help-recover-3984c.appspot.com\",\n  messagingSenderId: \"200817849391\",\n  appId: \"1:200817849391:web:80c54f2a630d75ce5682da\"\n};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar chatRoom = \"\";\nexport default function Chat(route, navigation) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errorMess = _useState6[0],\n      setErrorMess = _useState6[1];\n\n  var chatId = function chatId() {\n    var chatterId = route.route.params.senderId;\n    var chateeId = route.route.params.recieverId;\n    var chatIdPre = [];\n    chatIdPre.push(chatterId);\n    chatIdPre.push(chateeId);\n    return chatIdPre.join(\"_\");\n  };\n\n  var chatsRef = db.collection(\"chats\");\n  useEffect(function () {\n    fetch(\"http://localhost:3000/chat/\" + route.route.params.senderId + \"/\" + route.route.params.recieverId).then(function (reponse) {\n      return reponse.json();\n    }).then(function (json) {\n      if (json.length === 0) {\n        chatRoom = chatId();\n        var requestOptions = {\n          method: \"POST\",\n          headers: new Headers({\n            Accept: \"application/json\",\n            \"content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          }),\n          body: JSON.stringify({\n            senderId: route.route.params.senderId,\n            recieverId: route.route.params.recieverId,\n            chatId: chatId()\n          })\n        };\n\n        try {\n          fetch(\"http://localhost:3000/chat/addroom\", requestOptions).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            console.log(data);\n          });\n        } catch (error) {\n          setErrorMess = (_readOnlyError(\"setErrorMess\"), true);\n        }\n      } else {\n        try {\n          chatRoom = json[0].roomId;\n        } catch (error) {\n          setErrorMess = (_readOnlyError(\"setErrorMess\"), true);\n        }\n      }\n    }).then(function () {\n      readUser();\n\n      try {\n        var _unsubscribe = chatsRef.doc(chatRoom).collection(\"message\").onSnapshot(function (querySnapshot) {\n          var messagesFirestore = querySnapshot.docChanges().filter(function (_ref) {\n            var type = _ref.type;\n            return type === \"added\";\n          }).map(function (_ref2) {\n            var doc = _ref2.doc;\n            var message = doc.data();\n            return _objectSpread(_objectSpread({}, message), {}, {\n              createdAt: message.createdAt.toDate()\n            });\n          }).sort(function (a, b) {\n            return b.createdAt.getTime() - a.createdAt.getTime();\n          });\n          appendMessages(messagesFirestore);\n        });\n      } catch (error) {\n        setErrorMess(true);\n      }\n\n      try {\n        return function () {\n          return unsubscribe();\n        };\n      } catch (error) {}\n    }).catch(function () {\n      console.log(\"an error occured\");\n      setErrorMess(true);\n    });\n  }, []);\n  var appendMessages = useCallback(function (messages) {\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n  }, [messages]);\n\n  function readUser() {\n    var user, _id, name, avatar;\n\n    return _regeneratorRuntime.async(function readUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user\"));\n\n          case 2:\n            user = _context.sent;\n\n            if (user) {\n              _id = JSON.parse(user).Id;\n              name = JSON.parse(user).name;\n              avatar = JSON.parse(user).avatar;\n              setUser({\n                _id: _id,\n                name: name,\n                avatar: avatar\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleSend(messages) {\n    var writes;\n    return _regeneratorRuntime.async(function handleSend$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            writes = messages.map(function (m) {\n              return chatsRef.doc(chatRoom).collection(\"message\").add(m);\n            });\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Promise.all(writes));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return errorMess ? React.createElement(Text, {\n    style: styles.erroMess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, \"Service non disponible\") : React.createElement(GiftedChat, {\n    messages: messages,\n    user: user,\n    isTyping: true,\n    maxInputLength: 200,\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 30\n  },\n  input: {\n    height: 50,\n    width: \"100%\",\n    borderWidth: 1,\n    padding: 15,\n    marginBottom: 20,\n    borderColor: \"gray\"\n  },\n  erroMess: {\n    color: \"red\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["E:/3TI/Integration/projet-Integration/App/Messenger/Chat.js"],"names":["React","useState","useEffect","useCallback","GiftedChat","AsyncStorage","firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","db","firestore","chatRoom","Chat","route","navigation","user","setUser","messages","setMessages","errorMess","setErrorMess","chatId","chatterId","params","senderId","chateeId","recieverId","chatIdPre","push","join","chatsRef","collection","fetch","then","reponse","json","requestOptions","method","headers","Headers","Accept","body","JSON","stringify","response","data","console","log","error","roomId","readUser","unsubscribe","doc","onSnapshot","querySnapshot","messagesFirestore","docChanges","filter","type","map","message","createdAt","toDate","sort","a","b","getTime","appendMessages","catch","previousMessages","append","getItem","_id","parse","Id","name","avatar","handleSend","writes","m","add","Promise","all","styles","erroMess","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","padding","input","height","width","borderWidth","marginBottom","borderColor","color","textAlign"],"mappings":"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","sourcesContent":["// @refresh reset\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { GiftedChat } from \"react-native-gifted-chat\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n} from \"react-native\";\r\nimport * as firebase from \"firebase\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDRItqqCOKaYRO3hMHpIc_m1V61oOQcfSY\",\r\n  authDomain: \"help-recover-3984c.firebaseapp.com\",\r\n  databaseURL: \"https://help-recover-3984c.firebaseio.com\",\r\n  projectId: \"help-recover-3984c\",\r\n  storageBucket: \"help-recover-3984c.appspot.com\",\r\n  messagingSenderId: \"200817849391\",\r\n  appId: \"1:200817849391:web:80c54f2a630d75ce5682da\",\r\n\r\n  \r\n};\r\n\r\n//prevent us from initialising the app every time we refresh screen\r\nif (firebase.apps.length === 0) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\nconst db = firebase.firestore();\r\nlet chatRoom = \"\";\r\n//let setErrorMess = true\r\n\r\nexport default function Chat(route, navigation) {\r\n  const [user, setUser] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [errorMess, setErrorMess] = useState(false);\r\n\r\n  const chatId = () => {\r\n    const chatterId = route.route.params.senderId;\r\n    const chateeId = route.route.params.recieverId;\r\n    const chatIdPre = [];\r\n    chatIdPre.push(chatterId);\r\n    chatIdPre.push(chateeId);\r\n    return chatIdPre.join(\"_\");\r\n  };\r\n\r\n  let chatsRef = db.collection(\"chats\");\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `http://localhost:3000/chat/${route.route.params.senderId}/${route.route.params.recieverId}`\r\n    )\r\n      .then((reponse) => reponse.json())\r\n      .then((json) => {\r\n        if (json.length === 0) {\r\n          chatRoom = chatId();\r\n          //chatsRef = db.collection('chats').doc(chatId()).collection('message');\r\n          const requestOptions = {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n              Accept: \"application/json\",\r\n              \"content-Type\": \"application/json\",\r\n              \"Access-Control-Allow-Origin\": \"*\",\r\n            }),\r\n            body: JSON.stringify({\r\n              senderId: route.route.params.senderId,\r\n              recieverId: route.route.params.recieverId,\r\n              chatId: chatId(),\r\n            }),\r\n          };\r\n          try {\r\n            fetch(\"http://localhost:3000/chat/addroom\", requestOptions)\r\n              .then((response) => response.json())\r\n              .then((data) => {\r\n                console.log(data);\r\n              });\r\n          } catch (error) {\r\n            setErrorMess = true;\r\n          }\r\n        } else {\r\n          try {\r\n            chatRoom = json[0].roomId;\r\n          } catch (error) {\r\n            setErrorMess = true;\r\n          }\r\n\r\n          // chatsRef = db.collection('chats').doc(json[0].roomId).collection('message');\r\n        }\r\n      })\r\n      .then(() => {\r\n        readUser();\r\n\r\n        //onSnapshot serves as an observer so it is called any time we have an update on our collection(table)\r\n        try {\r\n          const unsubscribe = chatsRef\r\n            .doc(chatRoom)\r\n            .collection(\"message\")\r\n            .onSnapshot((querySnapshot) => {\r\n              //we listen to the doc changes\r\n              const messagesFirestore = querySnapshot\r\n                .docChanges()\r\n                .filter(({ type }) => type === \"added\")\r\n                .map(({ doc }) => {\r\n                  const message = doc.data();\r\n                  //createdAt is firebase.firestore.Timestamp instance\r\n                  //https://firebase.google.com/docs/reference/js/firebase.firestore.Timestamp\r\n                  return { ...message, createdAt: message.createdAt.toDate() };\r\n                })\r\n                .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n              appendMessages(messagesFirestore);\r\n              //the 2 lines above sort the message by creation time so that recent messages are sent first\r\n            });\r\n        } catch (error) {\r\n          setErrorMess(true);\r\n        }\r\n        try {\r\n          return () => unsubscribe();\r\n        } catch (error) {\r\n          //setErrorMess(true);\r\n        }\r\n      })\r\n      .catch(function () {\r\n        console.log(\"an error occured\");\r\n        setErrorMess(true);\r\n      });\r\n  }, []);\r\n\r\n  const appendMessages = useCallback(\r\n    //prevent recent message from replacing previouse one\r\n    (messages) => {\r\n      setMessages((previousMessages) =>\r\n        GiftedChat.append(previousMessages, messages)\r\n      );\r\n    },\r\n    [messages]\r\n  );\r\n\r\n  async function readUser() {\r\n    //we get the user from async storage\r\n    const user = await AsyncStorage.getItem(\"user\");\r\n    if (user) {\r\n      //  const _id = Math.random().toString(36).substring(7);\r\n      const _id = JSON.parse(user).Id;\r\n      const name = JSON.parse(user).name;\r\n      const avatar = JSON.parse(user).avatar;\r\n      setUser({ _id, name, avatar });\r\n    }\r\n  }\r\n\r\n  async function handleSend(messages) {\r\n    const writes = messages.map((m) =>\r\n      chatsRef.doc(chatRoom).collection(\"message\").add(m)\r\n    );\r\n    await Promise.all(writes)\r\n  }\r\n\r\n  return errorMess ? (\r\n    <Text style={styles.erroMess}>Service non disponible</Text>\r\n  ) : (\r\n    <GiftedChat\r\n      messages={messages}\r\n      user={user}\r\n      isTyping={true}\r\n      maxInputLength={200}\r\n      onSend={handleSend}\r\n    />\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 30,\r\n  },\r\n  input: {\r\n    height: 50,\r\n    width: \"100%\",\r\n    borderWidth: 1,\r\n    padding: 15,\r\n    marginBottom: 20,\r\n    borderColor: \"gray\",\r\n  },\r\n  erroMess: {\r\n    color: \"red\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}