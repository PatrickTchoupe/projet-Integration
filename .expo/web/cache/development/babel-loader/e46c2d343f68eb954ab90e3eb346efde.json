{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\3TI\\\\Integration\\\\projet-Integration\\\\node_modules\\\\react-native-passmeter\\\\index.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PropTypes from 'prop-types';\nvar deviceWindow = Dimensions.get('window'),\n    regexArr = [/[a-z]/, /[A-Z]/, /[0-9]/, /[^A-Za-z0-9]/];\n\nvar PassMeter = function PassMeter(props) {\n  var barLength = deviceWindow.width * 0.9,\n      _useState = useState('Weak'),\n      _useState2 = _slicedToArray(_useState, 2),\n      passStat = _useState2[0],\n      setPassStat = _useState2[1],\n      _useState3 = useState(new Animated.Value(0)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      animateVal = _useState4[0],\n      setAnimateVal = _useState4[1],\n      _useState5 = useState(new Animated.Value(0)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      animateColor = _useState6[0],\n      setAnimateColor = _useState6[1];\n\n  useEffect(function () {\n    Animated.spring(animateVal, {\n      bounciness: 15,\n      toValue: barLength * (props.password.length / props.maxLength)\n    }).start();\n    var passPoint = 0;\n    if (props.password.length > 0 && props.password.length < props.minLength) setPassStat(props.labels[0]);else {\n      regexArr.forEach(function (rgx) {\n        return rgx.test(props.password) ? passPoint += 1 : null;\n      });\n      setPassStat(props.labels[passPoint]);\n    }\n    Animated.timing(animateColor, {\n      toValue: passPoint,\n      duration: 300\n    }).start();\n  }, [props.password]);\n  var interpolateColor = animateColor.interpolate({\n    inputRange: [0, 4],\n    outputRange: ['rgb(255,0,0)', 'rgb(0, 255, 0)']\n  });\n  return React.createElement(View, {\n    style: {\n      alignSelf: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.backBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), React.createElement(Animated.View, {\n    style: [styles.mainBar, {\n      backgroundColor: interpolateColor,\n      width: animateVal\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), props.showLabels ? props.password.length != 0 ? React.createElement(Animated.Text, {\n    style: {\n      margin: 10,\n      marginTop: 5,\n      color: interpolateColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, passStat) : null : null);\n};\n\nvar styles = {\n  backBar: {\n    backgroundColor: 'gray',\n    width: deviceWindow.width * 0.9,\n    height: 10,\n    borderRadius: 25\n  },\n  mainBar: {\n    position: 'absolute',\n    backgroundColor: 'blue',\n    height: 10,\n    borderRadius: 25\n  }\n};\nPassMeter.propTypes = {\n  minLength: PropTypes.number,\n  showLabels: PropTypes.bool,\n  maxLength: PropTypes.number,\n  labels: PropTypes.array.isRequired,\n  password: PropTypes.string.isRequired\n};\nPassMeter.defaultProps = {\n  minLength: 4,\n  maxLength: 15,\n  showLabels: true\n};\nexport default PassMeter;","map":{"version":3,"sources":["E:/3TI/Integration/projet-Integration/node_modules/react-native-passmeter/index.js"],"names":["React","useState","useEffect","PropTypes","deviceWindow","Dimensions","get","regexArr","PassMeter","props","barLength","width","passStat","setPassStat","Animated","Value","animateVal","setAnimateVal","animateColor","setAnimateColor","spring","bounciness","toValue","password","length","maxLength","start","passPoint","minLength","labels","forEach","rgx","test","timing","duration","interpolateColor","interpolate","inputRange","outputRange","alignSelf","styles","backBar","mainBar","backgroundColor","showLabels","margin","marginTop","color","height","borderRadius","position","propTypes","number","bool","array","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { View, Dimensions, Animated } from 'react-native'\nimport PropTypes from 'prop-types'\n\nconst\n    deviceWindow = Dimensions.get('window'),\n    regexArr = [/[a-z]/, /[A-Z]/, /[0-9]/, /[^A-Za-z0-9]/]\n\nconst PassMeter = props => {\n    const\n        barLength = deviceWindow.width * 0.9,\n        [passStat, setPassStat] = useState('Weak'),\n        [animateVal, setAnimateVal] = useState(new Animated.Value(0)),\n        [animateColor, setAnimateColor] = useState(new Animated.Value(0))\n\n    useEffect(() => {\n        Animated.spring(animateVal, { bounciness: 15, toValue: barLength * (props.password.length / props.maxLength) }).start()\n        let passPoint = 0\n\n        if (props.password.length > 0 && props.password.length < props.minLength)\n            setPassStat(props.labels[0])\n        else {\n            regexArr.forEach(rgx => rgx.test(props.password) ? passPoint += 1 : null)\n            setPassStat(props.labels[passPoint])\n        }\n        Animated.timing(animateColor, { toValue: passPoint, duration: 300 }).start()\n\n    }, [props.password])\n\n    const interpolateColor = animateColor.interpolate({\n        inputRange: [0, 4],\n        outputRange: ['rgb(255,0,0)', 'rgb(0, 255, 0)']\n    })\n\n    return (\n        <View style={{ alignSelf: 'center' }}>\n            <View style={styles.backBar} />\n            <Animated.View style={[styles.mainBar, { backgroundColor: interpolateColor, width: animateVal }]} />\n            {\n                props.showLabels ?\n                    props.password.length != 0 ?\n                        <Animated.Text style={{ margin: 10, marginTop: 5, color: interpolateColor }}>{passStat}</Animated.Text>\n                        : null\n                    : null\n            }\n        </View>\n    )\n}\n\nconst styles = {\n    backBar: {\n        backgroundColor: 'gray',\n        width: deviceWindow.width * 0.9,\n        height: 10,\n        borderRadius: 25\n    },\n    mainBar: {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        height: 10,\n        borderRadius: 25\n    }\n}\n\nPassMeter.propTypes = {\n    minLength: PropTypes.number,\n    showLabels: PropTypes.bool,\n    maxLength: PropTypes.number,\n    labels: PropTypes.array.isRequired,\n    password: PropTypes.string.isRequired\n}\n\nPassMeter.defaultProps = {\n    minLength: 4,\n    maxLength: 15,\n    showLabels: true\n}\n\nexport default PassMeter"]},"metadata":{},"sourceType":"module"}