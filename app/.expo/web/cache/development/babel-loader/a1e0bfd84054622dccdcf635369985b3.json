{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\treso\\\\Documents\\\\proj_int\\\\projet-Integration\\\\app\\\\Messenger\\\\Chat.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport AsyncStorage from '@react-native-community/async-storage';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDRItqqCOKaYRO3hMHpIc_m1V61oOQcfSY\",\n  authDomain: \"help-recover-3984c.firebaseapp.com\",\n  databaseURL: \"https://help-recover-3984c.firebaseio.com\",\n  projectId: \"help-recover-3984c\",\n  storageBucket: \"help-recover-3984c.appspot.com\",\n  messagingSenderId: \"200817849391\",\n  appId: \"1:200817849391:web:80c54f2a630d75ce5682da\"\n};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar chatsRef = db.collection('chats');\nexport default function Chat() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messages = _useState6[0],\n      setMessages = _useState6[1];\n\n  useEffect(function () {\n    readUser();\n    var unsubscribe = chatsRef.onSnapshot(function (querySnapshot) {\n      var messagesFirestore = querySnapshot.docChanges().map(function (_ref) {\n        var doc = _ref.doc;\n        var message = doc.data();\n        return _objectSpread(_objectSpread({}, message), {}, {\n          createdAt: message.createdAt.toDate()\n        });\n      }).sort(function (a, b) {\n        return b.createdAt.getTime() - a.createdAt.getTime();\n      });\n      getUserMsg(messagesFirestore);\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n\n  function getUserMsg(x) {\n    var chatMess = x.filter(function (x) {\n      return x.user.reciever === 'tresor' && x.user.name === 'tek';\n    });\n    appendMessages(chatMess);\n  }\n\n  var appendMessages = useCallback(function (messages) {\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n  }, [messages]);\n\n  function readUser() {\n    var user;\n    return _regeneratorRuntime.async(function readUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            user = _context.sent;\n\n            if (user) {\n              setUser(JSON.parse(user));\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handlePress() {\n    var _id, reciever, user;\n\n    return _regeneratorRuntime.async(function handlePress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _id = Math.random().toString(36).substring(7);\n            reciever = \"tresor\";\n            user = {\n              _id: _id,\n              name: name,\n              reciever: reciever\n            };\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('user', JSON.stringify(user)));\n\n          case 5:\n            setUser(user);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleSend(messages) {\n    var writes;\n    return _regeneratorRuntime.async(function handleSend$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            writes = messages.map(function (m) {\n              return chatsRef.add(m);\n            });\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(Promise.all(writes));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (!user) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, React.createElement(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter your name\",\n      value: name,\n      onChangeText: setName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }), React.createElement(Button, {\n      onPress: handlePress,\n      title: \"Enter the chat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(GiftedChat, {\n    messages: messages,\n    user: user,\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 30\n  },\n  input: {\n    height: 50,\n    width: '100%',\n    borderWidth: 1,\n    padding: 15,\n    marginBottom: 20,\n    borderColor: 'gray'\n  }\n});","map":{"version":3,"sources":["C:/Users/treso/Documents/proj_int/projet-Integration/app/Messenger/Chat.js"],"names":["React","useState","useEffect","useCallback","GiftedChat","AsyncStorage","firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","db","firestore","chatsRef","collection","Chat","user","setUser","name","setName","messages","setMessages","readUser","unsubscribe","onSnapshot","querySnapshot","messagesFirestore","docChanges","map","doc","message","data","createdAt","toDate","sort","a","b","getTime","getUserMsg","x","chatMess","filter","reciever","appendMessages","previousMessages","append","getItem","JSON","parse","handlePress","_id","Math","random","toString","substring","setItem","stringify","handleSend","writes","m","add","Promise","all","styles","container","input","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","height","width","borderWidth","marginBottom","borderColor"],"mappings":"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","sourcesContent":["// @refresh reset\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react'\r\nimport { GiftedChat } from 'react-native-gifted-chat'\r\nimport AsyncStorage from '@react-native-community/async-storage'\r\nimport { StyleSheet, TextInput, View,  Button } from 'react-native'\r\nimport * as firebase from 'firebase'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n \r\n    apiKey: \"AIzaSyDRItqqCOKaYRO3hMHpIc_m1V61oOQcfSY\",\r\n    authDomain: \"help-recover-3984c.firebaseapp.com\",\r\n    databaseURL: \"https://help-recover-3984c.firebaseio.com\",\r\n    projectId: \"help-recover-3984c\",\r\n    storageBucket: \"help-recover-3984c.appspot.com\",\r\n    messagingSenderId: \"200817849391\",\r\n    appId: \"1:200817849391:web:80c54f2a630d75ce5682da\"\r\n \r\n}\r\n\r\n//prevent us from initialising the app every time we refresh screen\r\nif (firebase.apps.length === 0) {\r\n    firebase.initializeApp(firebaseConfig)\r\n}\r\n\r\n\r\nconst db = firebase.firestore()\r\nconst chatsRef = db.collection('chats')\r\n\r\nexport default function Chat() {\r\n    const [user, setUser] = useState(null)\r\n    const [name, setName] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        readUser()\r\n        //onSnapshot serves as an observer so it is called any time we have an update on our collection(table)\r\n        const unsubscribe = chatsRef.onSnapshot((querySnapshot) => {\r\n          //we listen to the doc changes\r\n            const messagesFirestore = querySnapshot\r\n                .docChanges()\r\n                \r\n                .map(({ doc }) => {\r\n                    const message = doc.data()\r\n                    //createdAt is firebase.firestore.Timestamp instance\r\n                    //https://firebase.google.com/docs/reference/js/firebase.firestore.Timestamp\r\n                    return { ...message, createdAt: message.createdAt.toDate() }\r\n                })\r\n                .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\r\n                \r\n\r\n            getUserMsg(messagesFirestore);\r\n            //the 2 lines above sort the message by creation time so that recent messages are sent first\r\n        })\r\n        return () => unsubscribe()\r\n    }, [])\r\n\r\n    function getUserMsg (x) {\r\n\r\nconst chatMess =x.filter(x => (x.user.reciever ==='tresor' && x.user.name === 'tek'))\r\nappendMessages(chatMess)\r\n\r\n  }\r\n\r\n    const appendMessages = useCallback(\r\n        (messages) => {\r\n            setMessages((previousMessages) => GiftedChat.append(previousMessages, messages))\r\n        },\r\n        [messages]\r\n    )\r\n\r\n    async function readUser() {\r\n      //we get the user from async storage\r\n        const user = await AsyncStorage.getItem('user')\r\n        if (user) {\r\n            setUser(JSON.parse(user))\r\n        }\r\n    }\r\n    async function handlePress() {\r\n        //we generate a unique id for each user\r\n        const _id = Math.random().toString(36).substring(7)\r\n        const reciever = \"tresor\"\r\n        const user = { _id, name,reciever }\r\n        await AsyncStorage.setItem('user', JSON.stringify(user))\r\n        setUser(user)\r\n    }\r\n    async function handleSend(messages) {\r\n        const writes = messages.map((m) => chatsRef.add(m))\r\n        await Promise.all(writes)\r\n    }\r\n\r\n    if (!user) {\r\n      //no user in async storage\r\n        return (\r\n            <View style={styles.container}>\r\n                <TextInput style={styles.input} placeholder=\"Enter your name\" value={name} onChangeText={setName} />\r\n                <Button onPress={handlePress} title=\"Enter the chat\" />\r\n            </View>\r\n        )\r\n    }\r\n    return <GiftedChat messages={messages} user={user} onSend={handleSend} />\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: 30,\r\n    },\r\n    input: {\r\n        height: 50,\r\n        width: '100%',\r\n        borderWidth: 1,\r\n        padding: 15,\r\n        marginBottom: 20,\r\n        borderColor: 'gray',\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}