import * as express from "express";
import HTTP from "http-status-enum";
import {json} from "body-parser";
import {async, await} from "asyncawait";
import {Server} from "http";

const MIN_PORT = 12340;
const MAX_PORT = 12349;

let listen = (app: express.Application, port: number) => new Promise<Server>((resolve, reject) => {
  let s = app.listen(port, () => resolve(s));
  s.on("error", reject);
});

let startServer = (app: express.Application) => {
  for (let port = MIN_PORT; port <= MAX_PORT; port++) {
    try {
      return await(listen(app, port));
    } catch (error) {
      if (error.code !== "EADDRINUSE") {
        throw error;
      } else {
        console.warn(`Could not start test server: Port ${port} is already in use. Retrying ...`);
      }
    }
  }
};

export var createTestServer = async(() => {
  let server: Server;
  let app = express();
  app.use(json());
  app.get("/resources", (req, res) =>
    res.status(HTTP.OK).send(JSON.stringify([{id: 42, foo: "bar"}])));
  app.put("/resources/42", (req, res) =>
    res.status(HTTP.NO_CONTENT).end());
  app.post("/resources", (req, res) => {
    if (req.body.foo) {
      res.status(HTTP.CREATED).set("Location", `http://localhost:${server.address().port}/resources/43`).end();
    } else {
      res.status(HTTP.BAD_REQUEST).send({code: "MISSING_FIELD", message: `The field "foo" is missing`});
    }
  });
  app.delete("/resources/42", (req, res) =>
    res.status(HTTP.NO_CONTENT).end());
  app.all("*", (req, res) => {
    res.status(HTTP.NOT_FOUND).send({code: "NOT_FOUND", message: "The resource was not found"});
  });
  server = startServer(app);
  return server;
});