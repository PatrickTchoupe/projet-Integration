import {it, beforeAll, afterAll, await} from "./async";
import {HttpClient} from "./HttpClient";
import {Server} from "http";
import HTTP from "http-status-enum";
import {createTestServer} from "../spec/testServer";

describe("HttpClient", () => {

  let server: Server;
  let httpClient: HttpClient;

  beforeAll(() => {
    server = await(createTestServer());
    httpClient = new HttpClient(`localhost:${server.address().port}`);
  });
  afterAll(() => new Promise(resolve => {
    server.close();
    server.on("close", resolve);
  }));

  describe("get()", () => {

    it("should resolve if successful", () => {
      let response = await(httpClient.get("/resources"));
      expect(response.statusCode).toEqual(HTTP.OK);
      expect(response.body).toEqual([{id: 42, foo: "bar"}]);
    });

    it("should reject if not successful", () => {
      let err = await(httpClient.getFail("/foo"));
      expect(err.status).toEqual(HTTP.NOT_FOUND);
      expect(err.code).toEqual("NOT_FOUND");
      expect(err.message).toEqual("The resource was not found");
    });

  });

  describe("put()", () => {

    it("should resolve if successful", () => {
      let response = await(httpClient.put("/resources/42", {foo: "bar"}));
      expect(response.statusCode).toEqual(HTTP.NO_CONTENT);
      expect(response.body).toBeNull();
    });

  });

  describe("post()", () => {

    it("should resolve if successful", () => {
      let response = await(httpClient.post("/resources", {foo: "bar"}));
      expect(response.statusCode).toEqual(HTTP.CREATED);
      expect(response.headers.location).toEqual(`http://localhost:${server.address().port}/resources/43`);
      expect(response.body).toEqual(null);
    });

    it("should reject if not successful", () => {
      let err = await(httpClient.postFail("/resources", {bar: "baz"}));
      expect(err.status).toEqual(HTTP.BAD_REQUEST);
      expect(err.code).toEqual("MISSING_FIELD");
      expect(err.message).toEqual(`The field "foo" is missing`);
    });

  });

  describe("del()", () => {

    it("should resolve if successful", () => {
      let response = await(httpClient.del("/resources/42"));
      expect(response.statusCode).toEqual(HTTP.NO_CONTENT);
      expect(response.body).toEqual(null);
    });

  });

  describe("resource()", () => {

    it("should provide a resource", () => {
      let response = await(httpClient.resource("/resources").get());
      expect(response.statusCode).toBe(HTTP.OK);
      expect(response.body).toEqual([{id: 42, foo: "bar"}]);
    });

    describe("resource()", () => {

      it("should provide a nested resource", () => {
        let response = await(httpClient.resource("/resources").resource("/42").del());
        expect(response.statusCode).toBe(HTTP.NO_CONTENT);
      });

    });

  });

});