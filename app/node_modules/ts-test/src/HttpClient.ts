import * as request from "request";

interface IResponse {
  statusCode: number;
  body?: any;
  headers: any;
}

interface IRequestError extends Error {
  status?: number;
  code?: string;
}

export class HttpClient {
  constructor(private baseUrl: string) {
    if (!baseUrl.match(/^https?:\/\//)) {
      this.baseUrl = `http://${baseUrl}`;
    }
  }

  static request(method: string, url: string, data?: any): Promise<IResponse> {
    return new Promise((resolve, reject) => {
      request[method](url, data ? {json: data} : null, responseHandler.bind(null, resolve, reject));
    });
  }

  static requestFail(method: string, url: string, data?: any): Promise<IRequestError> {
    return HttpClient.request(method, url, data)
      .then(
        response => new Error(`This request should fail, but was successful with ${response}`),
        error => error
      );
  }

  request = (method: string, path: string, data?: any) => HttpClient.request(method, `${this.baseUrl}${path}`, data);
  requestFail = (method: string, path: string, data?: any) => HttpClient.requestFail(method, `${this.baseUrl}${path}`, data);

  get = (path: string) => this.request("get", path);
  put = (path: string, data: any) => this.request("put", path, data);
  post = (path: string, data: any) => this.request("post", path, data);
  del = (path: string) => this.request("del", path);

  getFail = (path: string) => this.requestFail("get", path);
  putFail = (path: string, data: any) => this.requestFail("put", path, data);
  postFail = (path: string, data: any) => this.requestFail("post", path, data);
  delFail = (path: string) => this.requestFail("del", path);

  resource = (path: string) => new HttpResource(this, path);
}

export class HttpResource {
  private client: HttpClient;
  private path: string;

  constructor(client: HttpClient | HttpResource, path: string) {
    if (client instanceof HttpClient) {
      this.client = client;
      this.path = path;
    } else {
      this.client = (<HttpResource>client).client;
      this.path = `${(<HttpResource>client).path}${path}`;
    }
  }

  get = () => this.client.get(this.path);
  put = (data: any) => this.client.put(this.path, data);
  post = (data: any) => this.client.post(this.path, data);
  del = () => this.client.del(this.path);

  getFail = () => this.client.getFail(this.path);
  putFail = (data: any) => this.client.putFail(this.path, data);
  postFail = (data: any) => this.client.postFail(this.path, data);
  delFail = () => this.client.delFail(this.path);

  resource = (path: string) => new HttpResource(this, path);
}

function responseHandler(resolve: Function, reject: Function, err: Error, response: IResponse, body: any) {
  "use strict";
  if (err) {
    reject(err);
  } else {
    if (response.statusCode >= 400) {
      try {
        body = body ? (typeof body === "string" ? JSON.parse(body) : body) : null;
      } catch (err) {
        // it's okay if the body is not JSON formatted
      }
      let e: IRequestError;
      e = new Error(body.message || body);
      e.code = body.code;
      e.status = response.statusCode;
      reject(e);
    } else {
      try {
        response.body = body ? (typeof body === "string" ? JSON.parse(body) : body) : null;
        resolve(response);
      } catch (e) {
        resolve(body);
      }
    }
  }
}